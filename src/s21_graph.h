// dir2/foo2.h.
// — Пустая строка
// Системные заголовочные файлы C (точнее: файлы с включением угловыми скобками с расширением .h), например <unistd.h>, <stdlib.h>.
// — Пустая строка
// Заголовочные файлы стандартной библиотеки C++ (без расширения в файлах), например <algorithm>, <cstddef>.
// — Пустая строка
// Заголовочные .h файлы других библиотек.
// Файлы .h вашего проекта.

// https://habr.com/ru/post/499944/
// Внутри каждой секции группируйте вместе подобные декларации. 
// Предпочтителен следующий порядок: типы (включая typedef, using, 
// вложенные классы и структуры), константы, фабричные методы, конструкторы, 
// операторы присваивания, деструкторы, остальные методы, члены данных.

// Определение класса обычно начинается с секции public:, далее идёт protected: 
// и затем private:. Пустые секции не указывайте.

// Все параметры, передаваемые по ссылке (lvalue reference) должны быть 
// помечены как const.

// Вы можете использовать rvalue-ссылки чтобы объявить пары перегружаемых 
// функций, одна с Foo&&, другая с const Foo&. 

// Для указателей (адресов) используйте nullptr, это улучшает безопасность типов.


// В этом и последующих заданиях считать, что номера вершин начинаются с 1

#ifndef S21_GRAHP_H
# define S21_GRAHP_H
# include <iostream>

# include "s21_stack.h"
# include "s21_queue.h"

class Graph
{
public:
	void	loadGraphFromFile(std::string);// - загрузка графа из файла в формате матрицы смежности
	void	exportGraphToDot(std::string);// - выгрузка графа в файл в формате dot
};

#endif